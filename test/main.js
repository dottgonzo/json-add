"use strict";
var index_1 = require("../index");
var chai = require("chai");
var expect = chai.expect;
var arr1_copy = {
    aa: "aa",
    bb: "bb",
    zz: "zz",
    hh: {
        qq: "rr",
        zz: ["pp", "ff"]
    }
};
var arr1 = {
    aa: "aa",
    bb: "bb",
    zz: "zz",
    hh: {
        qq: "rr",
        zz: ["pp", "ff"]
    }
};
var arr2 = {
    aa: "aa",
    bb: "cc",
    dd: "dd"
};
var arr3 = {
    aa: "aa",
    bb: "cc",
    dd: "dd",
    zz: "zz",
    hh: {
        qq: "rr",
        zz: ["pp", "ff"]
    }
};
index_1.default(arr1, arr2);
describe("new generated object", function () {
    it("exist", function () {
        expect(arr1).to.be.ok;
    });
    it("is an object", function () {
        expect(arr1).is.an("object");
    });
    it("contains all property present of 1 object", function () {
        for (var i = 0; i < Object.keys(arr1_copy).length; i++) {
            expect(arr1).to.have.property(Object.keys(arr1_copy)[i]);
        }
    });
    it("contains all property present on 2 object", function () {
        for (var i = 0; i < Object.keys(arr2).length; i++) {
            expect(arr1).to.have.property(Object.keys(arr2)[i]);
        }
    });
    it("is deep equal of the 3 object", function () {
        expect(arr1).to.eql(arr3);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyIsImZpbGUiOiJ0ZXN0L21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWVyZ2UgZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gXCJjaGFpXCI7XG5sZXQgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmxldCBhcnIxX2NvcHkgPSB7XG4gICAgYWE6IFwiYWFcIixcbiAgICBiYjogXCJiYlwiLFxuICAgIHp6OiBcInp6XCIsXG4gICAgaGg6IHtcbiAgICAgICAgcXE6IFwicnJcIixcbiAgICAgICAgeno6IFtcInBwXCIsIFwiZmZcIl1cbiAgICB9XG5cbn07XG5cbmxldCBhcnIxID0ge1xuICAgIGFhOiBcImFhXCIsXG4gICAgYmI6IFwiYmJcIixcbiAgICB6ejogXCJ6elwiLFxuICAgIGhoOiB7XG4gICAgICAgIHFxOiBcInJyXCIsXG4gICAgICAgIHp6OiBbXCJwcFwiLCBcImZmXCJdXG4gICAgfVxuXG59O1xuXG5sZXQgYXJyMiA9IHtcbiAgICBhYTogXCJhYVwiLFxuICAgIGJiOiBcImNjXCIsXG4gICAgZGQ6IFwiZGRcIlxufTtcblxubGV0IGFycjMgPSB7XG4gICAgYWE6IFwiYWFcIixcbiAgICBiYjogXCJjY1wiLFxuICAgIGRkOiBcImRkXCIsXG4gICAgeno6IFwienpcIixcbiAgICBoaDoge1xuICAgICAgICBxcTogXCJyclwiLFxuICAgICAgICB6ejogW1wicHBcIiwgXCJmZlwiXVxuICAgIH1cbn07XG5cbm1lcmdlKGFycjEsIGFycjIpO1xuXG5kZXNjcmliZShcIm5ldyBnZW5lcmF0ZWQgb2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xuICAgIGl0KFwiZXhpc3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChhcnIxKS50by5iZS5vaztcbiAgICB9KTtcblxuICAgIGl0KFwiaXMgYW4gb2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QoYXJyMSkuaXMuYW4oXCJvYmplY3RcIik7XG4gICAgfSk7XG5cbiAgICBpdChcImNvbnRhaW5zIGFsbCBwcm9wZXJ0eSBwcmVzZW50IG9mIDEgb2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKGFycjFfY29weSkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGV4cGVjdChhcnIxKS50by5oYXZlLnByb3BlcnR5KE9iamVjdC5rZXlzKGFycjFfY29weSlbaV0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpdChcImNvbnRhaW5zIGFsbCBwcm9wZXJ0eSBwcmVzZW50IG9uIDIgb2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKGFycjIpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBleHBlY3QoYXJyMSkudG8uaGF2ZS5wcm9wZXJ0eShPYmplY3Qua2V5cyhhcnIyKVtpXSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KFwiaXMgZGVlcCBlcXVhbCBvZiB0aGUgMyBvYmplY3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChhcnIxKS50by5lcWwoYXJyMyk7XG4gICAgfSk7XG5cblxufSk7XG4iXX0=
